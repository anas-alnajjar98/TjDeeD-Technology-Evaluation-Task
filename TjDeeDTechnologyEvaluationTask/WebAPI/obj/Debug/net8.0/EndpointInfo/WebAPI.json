{
  "openapi": "3.0.1",
  "info": {
    "title": "TjDeeD Technology Evaluation Task",
    "description": "a RESTful API for a simple e-commerce application.",
    "version": "v1"
  },
  "paths": {
    "/api/Categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a new category.",
        "requestBody": {
          "description": "The name of the category to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created successfully"
          },
          "400": {
            "description": "Bad request due to empty or invalid category name"
          },
          "403": {
            "description": "Forbidden if the user does not have the required permissions"
          }
        }
      }
    },
    "/api/Categories/{categoryId}": {
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates an existing category by its ID.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "The ID of the category to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated name for the category.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "400": {
            "description": "Bad request due to empty or invalid category name"
          },
          "404": {
            "description": "Not found if the category with the specified ID does not exist"
          },
          "401": {
            "description": "Unauthorized if the user does not have permission to update the category"
          },
          "500": {
            "description": "Internal server error if something goes wrong during the update process"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a category and its associated products by the category ID.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "The ID of the category to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category and its products deleted successfully"
          },
          "400": {
            "description": "Bad request if category ID is invalid"
          },
          "404": {
            "description": "Not found if the category with the specified ID does not exist"
          },
          "401": {
            "description": "Unauthorized if the user does not have permission to delete the category"
          },
          "500": {
            "description": "Internal server error if something goes wrong during the deletion process"
          }
        }
      }
    },
    "/api/Order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Creates a new order for a user.",
        "requestBody": {
          "description": "The details of the order to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Returns the created order details."
          },
          "400": {
            "description": "Returns bad request if the order data is null or invalid."
          },
          "500": {
            "description": "Returns internal server error if an unexpected error occurs during order creation."
          }
        }
      }
    },
    "/api/Order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves an order by its ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The ID of the order to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the order details if the order is found."
          },
          "404": {
            "description": "Returns not found if no order with the specified ID exists."
          }
        }
      }
    },
    "/api/Order/create-payment": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Initiates the payment process by creating an order and generating a payment intent.",
        "requestBody": {
          "description": "The order details to be created, including customer information, items, and total amount.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the payment intent ID and client secret."
          },
          "400": {
            "description": "Returns an error if order creation fails."
          },
          "404": {
            "description": "Returns an error if the created order is not found."
          }
        }
      }
    },
    "/api/Product": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Creates a new product.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ProductName": {
                    "type": "string"
                  },
                  "Description": {
                    "type": "string"
                  },
                  "Price": {
                    "type": "number",
                    "format": "double"
                  },
                  "CategoryId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "Image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ProductName": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Price": {
                  "style": "form"
                },
                "CategoryId": {
                  "style": "form"
                },
                "Image": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success message when the product is created successfully."
          },
          "400": {
            "description": "Returns a bad request if the image file is not provided."
          },
          "500": {
            "description": "Returns an internal server error if an unexpected error occurs."
          }
        }
      }
    },
    "/api/Product/GetProductByID/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieves a product by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the product details if the product is found."
          },
          "404": {
            "description": "If no product is found with the provided ID."
          },
          "500": {
            "description": "Internal server error if an unexpected error occurs during the process."
          }
        }
      }
    },
    "/api/Product/{id}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a product by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Returns no content when the product is deleted successfully."
          },
          "401": {
            "description": "Returns unauthorized if the user is not authenticated or does not have the \"Admin\" role."
          },
          "404": {
            "description": "Returns not found if the product with the given ID does not exist."
          },
          "500": {
            "description": "Returns an internal server error if an unexpected error occurs."
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a product's details by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ProductName": {
                    "type": "string"
                  },
                  "Description": {
                    "type": "string"
                  },
                  "Price": {
                    "type": "number",
                    "format": "double"
                  },
                  "CategoryId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "Image": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "ProductName": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Price": {
                  "style": "form"
                },
                "CategoryId": {
                  "style": "form"
                },
                "Image": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Returns no content when the product is updated successfully."
          },
          "401": {
            "description": "Returns unauthorized if the user is not authenticated or does not have the \"Admin\" role."
          },
          "404": {
            "description": "Returns not found if the product with the given ID does not exist."
          },
          "500": {
            "description": "Returns an internal server error if an unexpected error occurs."
          }
        }
      }
    },
    "/api/User/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Registers a new user with the provided registration data.",
        "requestBody": {
          "description": "The registration data containing the user's username, email, password, and full name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully."
          },
          "400": {
            "description": "Bad request if registration data is invalid or the user already exists."
          },
          "500": {
            "description": "Internal server error if an unexpected error occurs during registration."
          }
        }
      }
    },
    "/api/User/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Authenticates a user with the provided login credentials (email/username and password).",
        "requestBody": {
          "description": "The login request containing the user's email/username and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated, returns access token and refresh token."
          },
          "401": {
            "description": "Unauthorized if credentials are invalid."
          },
          "500": {
            "description": "Internal server error if an unexpected error occurs during authentication."
          }
        }
      }
    },
    "/api/User/refresh-token": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Refreshes the user's access token using the provided refresh token.",
        "requestBody": {
          "description": "The refresh token used to obtain a new access token.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed the access token."
          },
          "401": {
            "description": "Unauthorized if the refresh token is invalid or expired."
          },
          "500": {
            "description": "Internal server error if an unexpected error occurs during the refresh process."
          }
        }
      }
    },
    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "operationId": "GetWeatherForecast",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRegistrationDto": {
        "required": [
          "confirmPassword",
          "email",
          "fullName",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 6,
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string"
          },
          "fullName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WeatherForecast": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter 'Bearer' [space] and then your token.",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}